--lpm_counter DEVICE_FAMILY="Cyclone" lpm_direction="UP" lpm_modulus=2048 lpm_width=11 aclr clk_en clock cout q
--VERSION_BEGIN 5.0 cbx_cycloneii 2004:12:20:14:28:52:SJ cbx_lpm_add_sub 2005:04:12:13:30:42:SJ cbx_lpm_compare 2004:11:30:11:30:40:SJ cbx_lpm_counter 2005:02:02:04:37:10:SJ cbx_lpm_decode 2004:12:13:14:19:12:SJ cbx_mgl 2005:05:19:13:51:58:SJ cbx_stratix 2005:11:01:14:36:46:SJ cbx_stratixii 2004:12:22:13:27:12:SJ  VERSION_END


--  Copyright (C) 1988-2005 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cyclone_lcell (aclr, aload, cin, clk, dataa, datab, datac, datad, ena, inverta, regcascin, sclr, sload)
WITH ( 	cin_used,	lut_mask,	operation_mode,	output_mode,	register_cascade_mode,	sum_lutc_input,	synch_mode) 
RETURNS ( combout, cout, regout);

--synthesis_resources = lut 12 
SUBDESIGN cntr_vt9
( 
	aclr	:	input;
	clk_en	:	input;
	clock	:	input;
	cout	:	output;
	q[10..0]	:	output;
) 
VARIABLE 
	counter_cella0 : cyclone_lcell
		WITH (
			cin_used = "false",
			lut_mask = "11AA",
			operation_mode = "arithmetic",
			synch_mode = "on"
		);
	counter_cella1 : cyclone_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella2 : cyclone_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella3 : cyclone_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella4 : cyclone_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella5 : cyclone_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella6 : cyclone_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella7 : cyclone_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella8 : cyclone_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella9 : cyclone_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	counter_cella10 : cyclone_lcell
		WITH (
			cin_used = "true",
			lut_mask = "12A0",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin",
			synch_mode = "on"
		);
	cout_bit : cyclone_lcell
		WITH (
			cin_used = "true",
			lut_mask = "F0F0",
			operation_mode = "normal",
			sum_lutc_input = "cin",
			synch_mode = "off"
		);
	a_val[10..0]	: WIRE;
	aclr_actual	: WIRE;
	aset_node	: WIRE;
	data[10..0]	: NODE;
	s_val[10..0]	: WIRE;
	safe_q[10..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	sset_node	: WIRE;
	time_to_clear	: WIRE;
	updownDir	: WIRE;

BEGIN 
	counter_cella[10..0].aclr = aclr_actual;
	counter_cella[10..0].aload = B"00000000000";
	counter_cella[1].cin = counter_cella[0].cout;
	counter_cella[2].cin = counter_cella[1].cout;
	counter_cella[3].cin = counter_cella[2].cout;
	counter_cella[4].cin = counter_cella[3].cout;
	counter_cella[5].cin = counter_cella[4].cout;
	counter_cella[6].cin = counter_cella[5].cout;
	counter_cella[7].cin = counter_cella[6].cout;
	counter_cella[8].cin = counter_cella[7].cout;
	counter_cella[9].cin = counter_cella[8].cout;
	counter_cella[10].cin = counter_cella[9].cout;
	counter_cella[10..0].clk = clock;
	counter_cella[10..0].dataa = safe_q[];
	counter_cella[10..0].datab = B"00000000000";
	counter_cella[10..0].datac = data[];
	counter_cella[10..0].ena = clk_en;
	counter_cella[10..0].sclr = sclr;
	counter_cella[10..0].sload = sload;
	cout_bit.cin = counter_cella[10].cout;
	cout_bit.dataa = updownDir;
	cout_bit.datab = time_to_clear;
	a_val[] = B"11111111111";
	aclr_actual = aclr;
	aset_node = B"0";
	cout = cout_bit.combout;
	data[] = GND;
	q[] = safe_q[];
	s_val[] = B"11111111111";
	safe_q[] = counter_cella[10..0].regout;
	sclr = GND;
	sload = GND;
	sset_node = B"0";
	time_to_clear = B"0";
	updownDir = B"1";
END;
--VALID FILE
